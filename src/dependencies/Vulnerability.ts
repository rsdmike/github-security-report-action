import { type SecurityAdvisory, type SecurityVulnerability, type VulnerabilityAlert } from './DependencyTypes'

export interface DismissedBy {
  user: {
    login: string
    name: string
  }
  reason: string
  at: string
}

export interface VulnerableSource {
  manifest: string
  version: string
  path: string
}

export default class Vulnerability {
  private readonly data: VulnerabilityAlert

  constructor (data: VulnerabilityAlert) {
    this.data = data
  }

  get created (): string {
    return this.data.createdAt
  }

  get isDismissed (): boolean {
    return !!this.data.dismisser
  }

  get dismissedBy (): DismissedBy {
    return {
      user: {
        login: this.data.dismisser.login,
        name: this.data.dismisser.name
      },
      reason: this.data.dismissReason,
      at: this.data.dismissedAt
    }
  }

  get severity (): string {
    return this.data.securityVulnerability.severity
  }

  get vulnerability (): SecurityVulnerability {
    return Object.assign({}, this.data.securityVulnerability)
  }

  get advisory (): SecurityAdvisory {
    return Object.assign({}, this.data.securityAdvisory)
  }

  get source (): VulnerableSource {
    return {
      manifest: this.data.vulnerableManifestFilename,
      version: this.data.vulnerableRequirements,
      path: this.data.vulnerableManifestPath
    }
  }

  get publishedAt (): string {
    return this.advisory.publishedAt
  }

  get link (): string {
    return this.advisory.permalink
  }
}
